# -*- coding: utf-8 -*-
"""cardheko.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aDnboDhNEtjn9J0jNBg0cvpCewRQFt5e
"""

import pandas as pd
from matplotlib import pyplot as plt

import pandas as pd

# Specify the engine parameter explicitly
data = pd.read_excel('/content/chennai_cars.xlsx')

# Now try to read the Excel file

data.shape #rows,columns

data.head()

data.new_car_detail[0]

# package to convert string to dictionary
import numpy as np
import ast
ast.literal_eval(data.new_car_detail[0])['ft']

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ft'])

    continue

data["fuel type"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['bt'])

    continue

data["Body type"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['km'])

    continue

data["Kilometers driven"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['transmission'])

    continue

data["Transmission type"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ownerNo'])

    continue

data["Number of previous owners"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['owner'])

    continue

data["Ownership details"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['oem'])

    continue

data["Original Equipment Manufacturer"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['model'])

    continue

data["Car model"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['modelYear'])

    continue

data["Year of car manufacture"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['centralVariantId'])

    continue

data["Central variant ID"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['variantName'])

    continue

data["Variant name"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['price'])

    continue

data["Price of the used car"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['priceActual'])

    continue

data["Actual price"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['priceSaving'])

    continue

data["Price saving "]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['priceFixedText'])

    continue

data["Fixed price details"]=collection_name  #create a new column

collection_name=[]
for i in data['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['trendingText'])

    continue

data["Trending car information"]=collection_name  #create a new column

data = data.drop(columns = ['new_car_detail'])

data

data = data.drop(columns = ['new_car_specs'])  #'new_car_overview','new_car_feature',

data = data.drop(columns = ['car_links'])

data = data.drop(columns = ['Trending car information'])

data['Location'] = 'chennai'

data

d1=pd.read_excel("/content/hyderabad_cars.xlsx")#read the file

d1.shape #rows,columns

d1.head()

d1.new_car_detail[0]

collection_name=[]
for i in d1['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ft'])

    continue

d1["fuel type"]=collection_name  #create a new column

import ast
import pandas as pd

# Assuming 'data' is your DataFrame

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('transmission'))

d1["Transmission type"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('bt'))

d1["Body type"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('km'))

d1["Kilometers driven"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('ownerNo'))

d1["Number of previous owners"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('owner'))

d1["Ownership details"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('oem'))

d1["Original Equipment Manufacturer"] = collection_name


collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('model'))

d1["Car model"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('modelYear'))

d1["Year of car manufacture"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('centralVariantId'))

d1[" Central variant ID"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('variantName'))

d1["Variant name"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('price'))

d1["Price of the used car"] = collection_name


collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceActual'))

d1["Actual price"] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceSaving'))

d1["Price saving "] = collection_name

collection_name = []
for i in d1['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceFixedText'))

d1["Fixed price details"] = collection_name

d1 = d1.drop(columns = ['new_car_specs']) #'new_car_overview','new_car_feature',

d1 = d1.drop(columns = ['car_links'])

d1 = d1.drop(columns = ['new_car_detail'])

d1['Location'] = 'Hyderabad'

d1

"""**concat**"""

#import pandas as pd

# Assuming 'data' and 'd1' are your DataFrames

# Concatenate vertically (along rows)
#concatenated_table = pd.concat([data, d1], ignore_index=True)

# concatenated_table now contains both data from 'data' and 'd1' stacked vertically.

d2=pd.read_excel("/content/delhi_cars.xlsx")#read the file

d2.shape #rows,columns

import ast
import pandas as pd

# Assuming 'data' is your DataFrame
collection_name=[]
for i in d2['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ft'])

d2["fuel type"]=collection_name  #create a new column

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('transmission'))

d2["Transmission type"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('bt'))

d2["Body type"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('km'))

d2["Kilometers driven"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('ownerNo'))

d2["Number of previous owners"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('owner'))

d2["Ownership details"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('oem'))

d2["Original Equipment Manufacturer"] = collection_name


collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('model'))

d2["Car model"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('modelYear'))

d2["Year of car manufacture"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('centralVariantId'))

d2[" Central variant ID"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('variantName'))

d2["Variant name"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('price'))

d2["Price of the used car"] = collection_name


collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceActual'))

d2["Actual price"] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceSaving'))

d2["Price saving "] = collection_name

collection_name = []
for i in d2['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceFixedText'))

d2["Fixed price details"] = collection_name

d2 = d2.drop(columns = ['new_car_specs'])# 'new_car_overview','new_car_feature',

d2 = d2.drop(columns = ['car_links'])

d2 = d2.drop(columns = ['new_car_detail'])

d2['Location'] = 'Delhi'

d2

d3=pd.read_excel("/content/jaipur_cars.xlsx")#read the file
d3.shape #rows,columns

import ast
import pandas as pd

# Assuming 'data' is your DataFrame
collection_name=[]
for i in d3['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ft'])

d3["fuel type"]=collection_name  #create a new column

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('transmission'))

d3["Transmission type"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('bt'))

d3["Body type"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('km'))

d3["Kilometers driven"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('ownerNo'))

d3["Number of previous owners"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('owner'))

d3["Ownership details"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('oem'))

d3["Original Equipment Manufacturer"] = collection_name


collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('model'))

d3["Car model"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('modelYear'))

d3["Year of car manufacture"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('centralVariantId'))

d3[" Central variant ID"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('variantName'))

d3["Variant name"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('price'))

d3["Price of the used car"] = collection_name


collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceActual'))

d3["Actual price"] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceSaving'))

d3["Price saving "] = collection_name

collection_name = []
for i in d3['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceFixedText'))

d3["Fixed price details"] = collection_name

d3 = d3.drop(columns = ['new_car_specs'])# 'new_car_overview','new_car_feature',
d3 = d3.drop(columns = ['car_links'])
d3 = d3.drop(columns = ['new_car_detail'])
d3['Location'] = 'Jaipur'

d3

d4=pd.read_excel("/content/kolkata_cars.xlsx")#read the file
d4.shape #rows,columns

import ast
import pandas as pd

# Assuming 'data' is your DataFrame
collection_name=[]
for i in d4['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ft'])

d4["fuel type"]=collection_name  #create a new column

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('transmission'))

d4["Transmission type"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('bt'))

d4["Body type"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('km'))

d4["Kilometers driven"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('ownerNo'))

d4["Number of previous owners"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('owner'))

d4["Ownership details"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('oem'))

d4["Original Equipment Manufacturer"] = collection_name


collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('model'))

d4["Car model"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('modelYear'))

d4["Year of car manufacture"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('centralVariantId'))

d4[" Central variant ID"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('variantName'))

d4["Variant name"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('price'))

d4["Price of the used car"] = collection_name


collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceActual'))

d4["Actual price"] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceSaving'))

d4["Price saving "] = collection_name

collection_name = []
for i in d4['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceFixedText'))

d4["Fixed price details"] = collection_name

d4 = d4.drop(columns = ['new_car_specs'])#'new_car_overview','new_car_feature'
d4 = d4.drop(columns = ['car_links'])
d4 = d4.drop(columns = ['new_car_detail'])
d4['Location'] = 'Kolkata'

d4

d5=pd.read_excel("/content/bangalore_cars.xlsx")#read the file
d5.shape #rows,columns

import ast
import pandas as pd

# Assuming 'data' is your DataFrame
collection_name=[]
for i in d5['new_car_detail'].values:
  if i == i:
    collection_name.append(ast.literal_eval(i)['ft'])

d5["fuel type"]=collection_name  #create a new column

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('transmission'))

d5["Transmission type"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('bt'))

d5["Body type"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('km'))

d5["Kilometers driven"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('ownerNo'))

d5["Number of previous owners"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('owner'))

d5["Ownership details"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('oem'))

d5["Original Equipment Manufacturer"] = collection_name


collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('model'))

d5["Car model"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('modelYear'))

d5["Year of car manufacture"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('centralVariantId'))

d5[" Central variant ID"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('variantName'))

d5["Variant name"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('price'))

d5["Price of the used car"] = collection_name


collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceActual'))

d5["Actual price"] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceSaving'))

d5["Price saving "] = collection_name

collection_name = []
for i in d5['new_car_detail'].values:
    if i == i:
        collection_name.append(ast.literal_eval(i).get('priceFixedText'))

d5["Fixed price details"] = collection_name

d5 = d5.drop(columns = ['new_car_specs'])#'new_car_overview','new_car_feature',
d5 = d5.drop(columns = ['car_links'])
d5 = d5.drop(columns = ['new_car_detail'])
d5['Location'] = 'Bangalore'

d5

import pandas as pd

# Assuming 'data' and 'd1' are your DataFrames

# Concatenate vertically (along rows)
cardekho = pd.concat([data, d1,d2,d3,d4,d5], ignore_index=True)

# concatenated_table now contains both data from 'data' and 'd1' stacked vertically.

cardekho

cardekho.info()

# Remove commas from values in the "Kilometers driven" column and then convert to int64
cardekho['Kilometers driven'] = cardekho['Kilometers driven'].str.replace(',', '').astype('int64')

cardekho['Year of car manufacture'] = pd.to_datetime(cardekho['Year of car manufacture'], format='%Y')

# Assuming 'cardekho' is your DataFrame

# Drop the last column using iloc
cardekho = cardekho.iloc[:, :-1]

# Display the DataFrame
print(cardekho)

cardekho

cardekho.new_car_overview

def to_get_overview(data):
    return {value['key']: value['value'] for value in data}

# Apply the transformation to cardekho.new_car_overview
cardekho.new_car_overview = cardekho.new_car_overview.apply(lambda x: to_get_overview(eval(x).get('top')))

# Create a new DataFrame from cardekho.new_car_overview
new_car_overview = pd.DataFrame(cardekho.new_car_overview.tolist())

new_car_overview

def to_get_features(data):
    extract = {'Features': [], "Comfort": [], "Interior":[], "Exterior": [] }
    for features in data['top']:
        extract['Features'].append(features['value'])
    try:
        for comfort in data['data'][0]['list']:
            extract['Comfort'].append(comfort['value'])
    except:
        extract['Comfort'].append('Not-Specified')
    try:
        for interior in data['data'][1]['list']:
            extract['Interior'].append(interior['value'])
    except:
        extract['Interior'].append('Not-Specified')
    try:
        for exterior in data['data'][2]['list']:
            extract['Exterior'].append(exterior['value'])
    except:
        extract['Exterior'].append(None)
    return extract

cardekho.new_car_feature = cardekho.new_car_feature.apply(lambda x: to_get_features(eval(x)))
new_car_feature = pd.DataFrame(cardekho.new_car_feature.tolist())
new_car_feature

pd.set_option('display.max_columns', 500)

car_data = pd.concat([cardekho, new_car_overview, new_car_feature], axis=1)
car_data.head()

car_data= car_data.drop(columns = ['new_car_overview','new_car_feature'])

car_data

import re

# Define the convert_price function
def convert_price(value):
    if 'Lakh' in value:
        value = re.sub(r'[^\d.]', '', value)  # Remove non-numeric characters except '.'
        value = float(value) * 100000  # 1 Lakh = 100,000
    elif 'Crore' in value:
        value = re.sub(r'[^\d.]', '', value)  # Remove non-numeric characters except '.'
        value = float(value) * 10000000  # 1 Crore = 10,000,000
    else:
        value = re.sub(r'[^\d.]', '', value)  # Remove non-numeric characters except '.'
        value = float(value)
    return value

# Apply the convert_price function to the 'Price' column of the DataFrame
car_data['Price of the used car'] = car_data['Price of the used car'].apply(lambda x: convert_price(x))

car_data

import matplotlib.pyplot as plt

# Define the list of columns you want to plot
columns_to_plot = ['fuel type', 'Body type', 'Transmission type', 'Number of previous owners',
                   'Ownership details', 'Original Equipment Manufacturer', 'Car model',
                   'Year of car manufacture', 'Central variant ID', 'Variant name', 'Location']

# Plot the frequency of values for each column
for column in columns_to_plot:
    # Get the frequency of each value in the column
    col_count = car_data[column].value_counts()

    # Plotting the bar plot
    plt.figure(figsize=(10, 6))
    col_count.plot(kind='bar')  # Plot the frequency of values
    plt.title(f'Frequency of {column} Values')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
    plt.show()

import matplotlib.pyplot as plt

# Define the list of columns you want to create scatter plots against
columns_to_plot = ['fuel type', 'Body type', 'Kilometers driven', 'Transmission type',
                   'Number of previous owners', 'Ownership details', 'Original Equipment Manufacturer',
                   'Car model', 'Year of car manufacture', 'Central variant ID', 'Variant name', 'Location', 'Current_Year', 'No_of_Years', 'Registration Year',
                   'Insurance Validity', 'Fuel Type', 'Seats', 'Kms Driven', 'RTO', 'Ownership',
                   'Engine Displacement', 'Transmission', 'Year of Manufacture', 'Features', 'Comfort',
                   'Interior', 'Exterior']

# Plot scatter plots for 'Price of the used car' against each column
for column in columns_to_plot:
    plt.figure(figsize=(10, 6))
    plt.scatter(car_data['Price of the used car'], car_data[column], alpha=0.5)
    plt.title(f'Scatter Plot: Price of the used car vs {column}')
    plt.xlabel('Price of the used car')
    plt.ylabel(column)
    plt.grid(True)
    plt.show()

car_data= car_data.drop(columns = ['Actual price'])

import seaborn as sns
import matplotlib.pyplot as plt

# Select numerical columns for correlation analysis
numerical_columns = ['Kilometers driven', 'Number of previous owners', 'Year of car manufacture',
                     'Price of the used car', 'Current_Year',
                     'No_of_Years', 'Registration Year', 'Seats', 'Kms Driven', 'Engine Displacement',
                     'Year of Manufacture']

# Filter the numerical columns from the DataFrame
numerical_data = car_data[numerical_columns]

# Compute the correlation matrix
correlation_matrix = numerical_data.corr()

# Set up the matplotlib figure
plt.figure(figsize=(12, 10))

# Plot the heatmap
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")

# Customize the plot
plt.title('Correlation Matrix of Numerical Variables')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=45)
plt.tight_layout()

# Show plot
plt.show()

car_data

# Select categorical columns
categorical_columns = car_data.select_dtypes(include=['object']).columns.tolist()

# Select numeric columns
numeric_columns = car_data.select_dtypes(include=['int64', 'float64']).columns.tolist()

# Print the lists
print("Categorical Columns:", categorical_columns)
print("Numeric Columns:", numeric_columns)

print(car_data.columns)

car_data = car_data.drop(columns=['Price saving '])

car_data['Year of car manufacture'] = pd.to_datetime(car_data['Year of car manufacture'], format='%Y')

car_data['Age of the Cars'] = current_year - car_data['Year of car manufacture'].dt.year

from datetime import datetime

# Determine the current year
current_year = datetime.now().year

# Calculate the age of the cars
car_data['Age of the Cars'] = current_year - car_data['Year of car manufacture']

# Convert Age of the Cars to Integer
car_data['Age of the Cars'] = car_data['Age of the Cars'].astype(int)

# Drop the 'Kms Driven' column from the DataFrame
car_data = car_data.drop(columns=['Kms Driven'])

# List of columns to drop
columns_to_drop = ['Features', 'Comfort', 'Interior', 'Exterior']

# Drop the specified columns from the DataFrame
car_data = car_data.drop(columns=columns_to_drop)

columns_to_drop = ['Transmission',	'Year of Manufacture']

# Drop the specified columns from the DataFrame
car_data = car_data.drop(columns=columns_to_drop)

columns_to_drop = ['Registration Year',	'Year of car manufacture']

# Drop the specified columns from the DataFrame
car_data = car_data.drop(columns=columns_to_drop)

columns_to_drop = ['Ownership details']

# Drop the specified columns from the DataFrame
car_data = car_data.drop(columns=columns_to_drop)

car_data

# Selecting categorical columns
categorical_columns = car_data.select_dtypes(include=['object']).columns.tolist()

# Selecting numeric columns
numeric_columns = car_data.select_dtypes(include=['int64', 'float64']).columns.tolist()

# Printing the lists
print("Categorical Columns:", categorical_columns)
print("Numeric Columns:", numeric_columns)

columns_to_count = ['fuel type', 'Body type', 'Transmission type',
                    'Original Equipment Manufacturer', 'Car model', 'Variant name', 'Location',
                    'Fuel Type', 'Seats', 'RTO', 'Ownership', 'Engine Displacement']

for column in columns_to_count:
    print(f"Value counts for {column}:")
    print(car_data[column].value_counts())
    print("\n")

car_data['fuel type'] = car_data['fuel type'].map({'Petrol':0,'Diesel':1,'Cng':2,'Electric':3,'Lpg':4})

car_data['Transmission type'] = car_data['Transmission type'].map({'Manual':0,'Automatic':1})

car_data['Location'] = car_data['Location'].map({'chennai':0,'Hyderabad':1,'Bangalore':2,'Delhi':3,'Kolkata':4,'Jaipur':5})

car_data['Seats'] = car_data['Seats'].map({'5 Seats':5,
    '7 Seats':7,
    '6 Seats':6,
    '4 Seats':4,
    '8 Seats':8,
    '9 Seats':9,
    '2 Seats':2,
    '10 Seats':10})

car_data['Body type'] = car_data['Body type'].map({'Hatchback':0,'SUV':1,'Sedan':2,'MUV':3,'Minivans':4,'Coupe':5,'Convertibles':6,'Pickup Trucks':6,'Hybrids':6,'Wagon':6})

car_data.head(1)

# Create a label encoder object label_encoder = LabelEncoder() # Fit and transform the 'Original Equipment Manufacturer' column encoded_Original Equipment Manufacturer = label_encoder.fit_transform(car_data['Original Equipment Manufacturer']) # Replace the original 'Original Equipment Manufacturer' column with the encoded values car_data['Original Equipment Manufacturer_encoded'] = encoded_Original Equipment Manufacturer car_data.drop(columns = 'Original Equipment Manufacturer', inplace = True)

car_data['Insurance Validity'] = car_data['Insurance Validity'].map({'Third Party insurance':0,'Comprehensive':1,'Third Party':2,'Zero Dep':3,'Not Available':4, 1:5, 2:6})

# Assuming 'Features' is the column name # Calculate the number of features inside each list car_data['num_features'] = car_data['Features'].apply(lambda x: len(x)) # Drop the original 'Features' column if needed car_data.drop(columns='Features', inplace=True)

# Assuming 'Features' is the column name # Calculate the number of features inside each list car_data['num_features'] = car_data['Features'].apply(lambda x: len(eval(x))) car_data.drop(columns = 'Features', inplace = True)

car_data['num_features'] = car_data['Features'].apply(lambda x: len(x)) # Drop the original 'Features' column if needed car_data.drop(columns='Features', inplace=True)

car_data['num_features'] = car_data['Features'].apply(lambda x: len(eval(x)))
car_data.drop(columns = 'Features', inplace = True)

car_data['num_Comfort'] = car_data['Comfort'].apply(lambda x: len(x))
car_data.drop(columns='Comfort', inplace=True)

car_data['num_Interior'] = car_data['Interior'].apply(lambda x: len(x))
car_data.drop(columns='Interior', inplace=True)

# Assuming 'Features' is the column name # Calculate the number of features inside each list car_data['num_Exterior'] = car_data['Exterior'].apply(lambda x: len((x))) car_data.drop(columns = 'Exterior', inplace = True)

car_data.drop(columns = 'Year of Manufacture', inplace = True)





#car_data['Ownership details'] = car_data['Ownership details'].map({'First Owner':1,'Second Owner':2,'Third Owner':3,'Fourth Owner':4,'Fifth Owner':5})

# Create a label encoder object label_encoder = LabelEncoder() # Fit and transform the 'Original Equipment Manufacturer' column encoded_Original Equipment Manufacturer = label_encoder.fit_transform(car_data['Original Equipment Manufacturer']) # Replace the original 'Original Equipment Manufacturer' column with the encoded values car_data['Original Equipment Manufacturer_encoded'] = encoded_Original Equipment Manufacturer car_data.drop(columns = 'Original Equipment Manufacturer', inplace = True)

columns_to_drop = ['Ownership details', 'Actual price', 'Fixed price details', 'Fuel Type', 'Registration Year', 'Year of car manufacture', 'RTO', 'Transmission']
car_data.drop(columns=columns_to_drop, inplace=True)

car_data['Ownership'].value_counts()

car=car_data.copy()

from sklearn.preprocessing import LabelEncoder

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Fit label encoder and transform the 'Ownership' column
car_data['Ownership_encoded'] = label_encoder.fit_transform(car_data['Ownership'])

# Display the value counts of the encoded column
print(car_data['Ownership_encoded'].value_counts())

# Display the mapping between original values and encoded values
print(dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_))))

car_data['num_Exterior'] = car_data['Exterior'].apply(lambda x: len(x))
car_data.drop(columns='Exterior', inplace=True)

car_data['num_Features'] = car_data['Features'].apply(lambda x: len(x))
car_data.drop(columns='Features', inplace=True)

# Assuming car_data is your DataFrame
car_data['Engine Displacement'] = car_data['Engine Displacement'].str.replace('cc', '')

# Define the mapping for the label changes
label_changes = {
    'First Owner': 1,
    'Second Owner': 2,
    'Third Owner': 3,
    'Fourth Owner': 4,
    'Fifth Owner': 5
}

# Replace the labels in the 'Ownership' column
car_data['Ownership'] = car_data['Ownership'].replace(label_changes)

# Check the updated value counts
print(car_data['Ownership'].value_counts())

# Calculate the frequency of each variantName variantName_frequency = car_data['variantName'].value_counts(normalize=True) # Map the frequency values to the variantName column car_data['variantName_encoded'] = car_data['variantName'].map(variantName_frequency)

# Assuming car_data is your DataFrame
oem_value_counts = car_data['Original Equipment Manufacturer'].value_counts()
print(oem_value_counts)

import category_encoders as ce
import category_encoders as ce

# Create a LeaveOneOutEncoder object
encoder = ce.LeaveOneOutEncoder()

# Assuming car_data is your DataFrame
target_column = 'Price of the used car'  # Replace 'Price' with the appropriate target column name

# Fit and transform the 'Original Equipment Manufacturer' column
car_data['OEM_encoded'] = encoder.fit_transform(car_data['Original Equipment Manufacturer'], car_data[target_column])

# Display the encoded values
print(car_data[['Original Equipment Manufacturer', 'OEM_encoded']])

import category_encoders as ce
import category_encoders as ce

# Create a LeaveOneOutEncoder object
encoder = ce.LeaveOneOutEncoder()

# Assuming car_data is your DataFrame
target_column = 'Price of the used car'  # Replace 'Price' with the appropriate target column name

# Fit and transform the 'Original Equipment Manufacturer' column
car_data['model'] = encoder.fit_transform(car_data['Car model'], car_data[target_column])

# Display the encoded values
print(car_data[['Car model', 'model']])

# Drop the specified columns
car_data.drop(columns=['Original Equipment Manufacturer', 'Car model', 'Variant name'], inplace=True)

data=car_data.copy()

data.info()

# Assuming car_data is your DataFrame
data['Engine Displacement'] = data['Engine Displacement'].astype('float64')

data.isnull().sum()

# Assuming car_data is your DataFrame
columns_to_fill = ['Body type', 'Insurance Validity', 'Seats', 'Ownership', 'Engine Displacement']

# Fill missing values with mean for each specified column
for column in columns_to_fill:
  data[column].fillna(data[column].mean(), inplace=True)

data.isnull().sum()

# Assuming data_table and df are your DataFrames
# Copying columns from data_table to df
# Create an empty DataFrame named df
df = pd.DataFrame()
df['fuel type'] = data['fuel type']
df['Body type'] = data['Body type']
df['Kilometers driven'] = data['Kilometers driven']
df['Transmission type'] = data['Transmission type']
df['Number of previous owners'] = data['Number of previous owners']
df['Price'] = data['Price of the used car']
df['Location'] = data['Location']
df['Insurance Validity'] = data['Insurance Validity']
df['Seats'] = data['Seats']
df['Ownership'] = data['Ownership']
df['Engine Displacement'] = data['Engine Displacement']
df['num_Comfort'] = data['num_Comfort']
df['num_Interior'] = data['num_Interior']
df['num_features'] = data['num_features']
df['Ownership_encoded'] = data['Ownership_encoded']
df['num_Exterior'] = data['num_Exterior']
df['num_Features'] = data['num_Features']
df['OEM_encoded'] = data['OEM_encoded']
df['model'] = data['model']

X = df.drop('Price',axis=1)
y = df['Price']

X

y

from sklearn.model_selection import train_test_split

# Assuming X and y are already defined
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=70)

print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

X_train

from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb

"""**Linear Regression**"""

from sklearn.linear_model import LinearRegression

# Initialize the Linear Regression model
linear_model = LinearRegression(fit_intercept=True)

# Fit the model to the training data
linear_model.fit(X_train, y_train)

# Predict on the test data
predictions = linear_model.predict(X_test)

# Print the predictions and the actual values
print("Predictions:", predictions)
print("Actual values:", y_test)

linear_model.score(X_test, y_test)

from sklearn.model_selection import cross_val_score

# Calculate cross-validation score for the linear regression model
cross_val_linear_model = cross_val_score(linear_model, X_train, y_train, cv=10).mean()

# Print the mean cross-validation score
print("Mean Cross-Validation Score (Linear Model):", cross_val_linear_model)

"""**K Nearest Neighbor Regression**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import cross_val_score
import numpy as np

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit the scaler to the training data and transform it
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define the range of k values
knn_values = np.arange(1, 50)
cross_val_knn = []

# Iterate through different k values
for k in knn_values:
    # Initialize KNeighborsRegressor with k neighbors
    knn_regressor = KNeighborsRegressor(n_neighbors=k)

    # Fit the KNN regressor to the scaled training data
    knn_regressor.fit(X_train_scaled, y_train)

    # Calculate the training score
    train_score = knn_regressor.score(X_train_scaled, y_train)

    # Calculate the cross-validation score
    cv_score = cross_val_score(knn_regressor, X_train_scaled, y_train, cv=10).mean()

    # Print the scores
    print("K value:", k, "Train score:", train_score, "Cross-validation score:", cv_score)

    # Append the cross-validation score to the list
    cross_val_knn.append(cv_score)

cross_val_knn_regressor=max(cross_val_knn)
print("The best K-Value is 4 and Cross_val_score is",cross_val_knn_regressor )

# Initialize K Nearest Neighbor Regression with 3 neighbors
knn_regressor = KNeighborsRegressor(n_neighbors=3)

# Fit the KNN regressor to the scaled training data
knn_regressor.fit(X_train_scaled, y_train)

from sklearn.model_selection import cross_val_score

# Compute the cross-validation score for knn_regressor
cross_val_knn_regressor = cross_val_score(knn_regressor, X_train_scaled, y_train, cv=15).mean()

# Print the cross-validation score
print("Cross-validation score for KNN Regression:", cross_val_knn_regressor)

"""**Random Forest Regression**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_score
import numpy as np

# Define the range of max_depth values to try
max_depth = np.array([2, 4, 8, 10, 11, 12, 13, 15, 18, 20])

# Initialize an empty list to store cross-validation scores
cross_val_rf = []

# Iterate through different max_depth values
for d in max_depth:
    # Initialize RandomForestRegressor with the current max_depth value
    rf_regressor = RandomForestRegressor(max_depth=d, random_state=0)

    # Fit the RandomForestRegressor to the training data
    rf_regressor.fit(X_train, y_train)

    # Calculate the cross-validation score
    cv_score = cross_val_score(rf_regressor, X_train, y_train, cv=15).mean()

    # Print the depth and cross-validation score
    print("Depth:", d, "Cross-validation score:", cv_score)

    # Append the cross-validation score to the list
    cross_val_rf.append(cv_score)

cross_val_rf_regressor = max(cross_val_rf)

print("The best depth is 18 and Cross_val_score is:",cross_val_rf_regressor)

from sklearn.ensemble import RandomForestRegressor

# Initialize a RandomForestRegressor with max_depth=18 and random_state=0
rf_regressor = RandomForestRegressor(max_depth=18, random_state=0)

# Fit the RandomForestRegressor to the training data
rf_regressor.fit(X_train, y_train)

from sklearn.model_selection import cross_val_score

# Compute the cross-validation score for rf_regressor
cross_val_rf_regressor = cross_val_score(rf_regressor, X_train, y_train, cv=15).mean()

# Print or use the cross-validation score
print("Cross-validation score for RandomForestRegressor:", cross_val_rf_regressor)

"""**Extreme Gradient Boosting Regression**"""

import xgboost as xgb
from sklearn.model_selection import cross_val_score

# Initialize an empty list to store cross-validation scores
cross_val_xgb = []

# Iterate through different learning rates
for lr in [0.01, 0.05, 0.08, 0.1, 0.2, 0.25, 0.3]:
    # Initialize XGBoost regressor with the current learning rate
    xgb_regressor = xgb.XGBRegressor(learning_rate=lr, n_estimators=100)

    # Fit the XGBoost regressor to the training data
    xgb_regressor.fit(X_train, y_train)

    # Calculate the cross-validation score
    cv_score = cross_val_score(xgb_regressor, X_train, y_train, cv=15).mean()

    # Print the learning rate and cross-validation score
    print("Learning rate:", lr, "Cross-validation score:", cv_score)

    # Append the cross-validation score to the list
    cross_val_xgb.append(cv_score)

cross_val_xgb_regressor = max(cross_val_xgb)

print("The best Learning rate is 0.25 and Cross_val_score is:",cross_val_xgb_regressor)

xgb_regressor= xgb.XGBRegressor(learning_rate =0.25,n_estimators=100) # initialise the model
xgb_regressor.fit(X_train,y_train) #train the model

"""**Cross-Validation Score for Machine-Learning Models**"""

print("Cross Validation Score for Linear Regression Model:", cross_val_linear_model)
print("Cross Validation Score for K-Nearest Neighbors Regression Model:", cross_val_knn_regressor)
print("Cross Validation Score for Random Forest Regression Model:", cross_val_rf_regressor)
print("Cross Validation Score for Extreme-Gradient Boosting Regression Model:", cross_val_xgb_regressor)

"""**R2 Score for Machine-Learning Models**"""

from sklearn.metrics import r2_score

# Predictions using Linear Regression
y_pred_lr = linear_model.predict(X_test)

# Predictions using K-Nearest Neighbors Regression
y_pred_knn = knn_regressor.predict(X_test)

# Predictions using Random Forest Regression
y_pred_rf = rf_regressor.predict(X_test)

# Predictions using Extreme-Gradient Boosting Regression
y_pred_xgb = xgb_regressor.predict(X_test)

from sklearn.metrics import r2_score

# R-squared score for Linear Regression
R2_score_lr = r2_score(y_test, y_pred_lr)

# R-squared score for K-Nearest Neighbors Regression
R2_score_knn = r2_score(y_test, y_pred_knn)

# R-squared score for Random Forest Regression
R2_score_rf = r2_score(y_test, y_pred_rf)

# R-squared score for Extreme-Gradient Boosting Regression
R2_score_xgb = r2_score(y_test, y_pred_xgb)

print("R2 Score for Linear Regression Model:", R2_score_lr)
print("R2 Score for K-Nearest Neighbors Regression Model:", R2_score_knn)
print("R2 Score for Random Forest Regression Model:", R2_score_rf)
print("R2 Score for Extreme-Gradient Boosting Regression Model:", R2_score_xgb)

sorted_idx = xgb_regressor.feature_importances_.argsort()

plt.figure(figsize=(10,5))
plt.barh(data.columns[sorted_idx], xgb_regressor.feature_importances_[sorted_idx])
plt.xlabel("XGBoost Feature Importance")
plt.title("Feature Importance")
plt.show()